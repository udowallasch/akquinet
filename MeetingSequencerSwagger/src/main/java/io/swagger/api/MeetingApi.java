/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.JsonMeetingData;
import io.swagger.model.JsonMeetingsData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-19T15:51:46.420Z")

@Api(value = "meeting", description = "the meeting API")
public interface MeetingApi {

    @ApiOperation(value = "Creates a new meeting", nickname = "createMeeting", notes = "Creates a new meeting", tags={ "meeting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Meeting was successfull created."),
        @ApiResponse(code = 409, message = "Conflict: Meeting with that name already exists"),
        @ApiResponse(code = 500, message = "Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request") })
    @RequestMapping(value = "/meeting",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createMeeting(@ApiParam(value = "the meeting to be created"  )  @Valid @RequestBody JsonMeetingData meeting);


    @ApiOperation(value = "Returns all available meetings", nickname = "getAllMeetings", notes = "Returns all available meetings.", response = JsonMeetingsData.class, tags={ "meeting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If there are any meeting, a JSON structure of the meeting data will be returned.", response = JsonMeetingsData.class),
        @ApiResponse(code = 404, message = "Not Found: No meeting was found."),
        @ApiResponse(code = 500, message = "Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request") })
    @RequestMapping(value = "/meeting",
        produces = { "application/json"}, 
        method = RequestMethod.GET)
    ResponseEntity<JsonMeetingsData> getAllMeetings();


    @ApiOperation(value = "Returns a meeting by ID", nickname = "getMeetingById", notes = "Returns a meeting by ID", response = JsonMeetingData.class, tags={ "meeting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If there are any meeting, a JSON structure of the meeting data will be returned.", response = JsonMeetingData.class),
        @ApiResponse(code = 404, message = "Not Found: No meeting was found."),
        @ApiResponse(code = 500, message = "Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request") })
    @RequestMapping(value = "/meeting/{meetingId}",
        produces = { "application/json"}, 
        method = RequestMethod.GET)
    ResponseEntity<JsonMeetingData> getMeetingById(@ApiParam(value = "",required=true) @PathVariable("meetingId") Integer meetingId);

}
