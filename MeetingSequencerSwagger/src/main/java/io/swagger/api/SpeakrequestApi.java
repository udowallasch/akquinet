/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.JsonSpeakRequestData;
import io.swagger.model.JsonSpeakRequestsData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import javax.validation.Valid;
import javax.validation.constraints.*;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-19T15:51:46.420Z")

@Api(value = "speakrequest", description = "the speakrequest API")
public interface SpeakrequestApi {

    @ApiOperation(value = "Creates a new speakrequest for a meeting", nickname = "createSpeakRequest", notes = "Creates a new speakrequest for a meeting", tags={ "speakRequest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If the speakrequest was registered successfully"),
        @ApiResponse(code = 500, message = "Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request") })
    @RequestMapping(value = "/speakrequest",
        produces = { "application/json"}, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createSpeakRequest(@ApiParam(value = "the speakrequest to be created"  )  @Valid @RequestBody JsonSpeakRequestData meeting);


    @ApiOperation(value = "Returns all speakrequest for a meeting", nickname = "getSpeakrequestByMeetingId", notes = "Returns all speakrequests for a meeting", response = JsonSpeakRequestsData.class, tags={ "speakRequest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If there are any speakRequest for the meeting, a JSON structure of the speakRequest data will be returned.", response = JsonSpeakRequestsData.class),
        @ApiResponse(code = 404, message = "Not Found: No speakrequest for the given meeting was found."),
        @ApiResponse(code = 500, message = "Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request") })
    @RequestMapping(value = "/speakrequest",
        produces = { "application/json"}, 
        method = RequestMethod.GET)
    ResponseEntity<JsonSpeakRequestsData> getSpeakrequestByMeetingId(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "meetingId", required = true) String meetingId);

}
